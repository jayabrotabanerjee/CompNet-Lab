B_private = 20e6; Tp_private = 0.005;
B_public = 5e6; Tp_public = 0.05;
lambda1 = 500; lambda2 = 500;
queue_size = 10;
packet_size = 1024;
sim_time = 10;

disp('Simulating Private IP Setup...');
[throughput_private, avg_delay_private, packet_loss_private] = simulate_multi_link(B_private, Tp_private, lambda1, lambda2, queue_size, packet_size, sim_time);

disp('Simulating Public IP Setup...');
[throughput_public, avg_delay_public, packet_loss_public] = simulate_multi_link(B_public, Tp_public, lambda1, lambda2, queue_size, packet_size, sim_time);

disp('Private IP Results:');
disp(['Throughput: ', num2str(throughput_private), ' Mbps']);
disp(['Average Delay: ', num2str(avg_delay_private), ' seconds']);
disp(['Packet Loss Rate: ', num2str(packet_loss_private), '%']);

disp('Public IP Results:');
disp(['Throughput: ', num2str(throughput_public), ' Mbps']);
disp(['Average Delay: ', num2str(avg_delay_public), ' seconds']);
disp(['Packet Loss Rate: ', num2str(packet_loss_public), '%']);

figure;
subplot(3,1,1);
bar([throughput_private, throughput_public]);
title('Throughput Comparison');
xticklabels({'Private IP', 'Public IP'});
ylabel('Throughput (Mbps)');

subplot(3,1,2);
bar([avg_delay_private, avg_delay_public]);
title('Average Delay Comparison');
xticklabels({'Private IP', 'Public IP'});
ylabel('Average Delay (seconds)');

subplot(3,1,3);
bar([packet_loss_private, packet_loss_public]);
title('Packet Loss Rate Comparison');
xticklabels({'Private IP', 'Public IP'});
ylabel('Packet Loss Rate (%)');

% Function to simulate multi-link network
function [throughput, avg_delay, packet_loss_rate] = simulate_multi_link(B, Tp, lambda1, lambda2, queue_size, packet_size, sim_time)
    % Generate arrivals for Host 1 and Host 2
    arrivals_H1 = poisson_process(lambda1, sim_time);
    arrivals_H2 = poisson_process(lambda2, sim_time);

    % Event list: each row is [arrival_time, source] where source = 1 for H1 and 2 for H2
    events_H1 = [arrivals_H1, ones(length(arrivals_H1), 1)];
    events_H2 = [arrivals_H2, 2*ones(length(arrivals_H2), 1)];

    % Combine and sort events
    event_list = sortrows([events_H1; events_H2], 1);
    num_events = size(event_list, 1); % Get initial number of events

    % Preallocate variables for simulation
    next_available = 0;       % Next available time for processing packets
    queue = zeros(queue_size, 2); % Packet queue at router [arrival_time, source]
    queue_count = 0;          % Current number of packets in the queue
    max_departures = num_events; % Upper bound for departures
    departures = zeros(max_departures, 3); % Departures list [arrival_time, departure_time, source]
    departure_count = 0;
    dropped = 0;              % Number of dropped packets
    event_index = 1;          % Index to iterate through the event list

    % Simulation loop
    while event_index <= num_events
        event = event_list(event_index, :);
        event_time = event(1);
        source = event(2);
        event_index = event_index + 1;

        if event_time <= sim_time
            if event_time >= next_available
                % Handle packet transmission and propagation based on source
                tx_time = (packet_size * 8) / B; % Transmission time is the same for both hosts
                prop_delay = Tp;                % Propagation delay is the same for both links

                dep_time = event_time + tx_time + prop_delay;  % Calculate departure time
                departure_count = departure_count + 1;
                departures(departure_count, :) = [event_time, dep_time, source];  % Record departure
                next_available = dep_time;      % Update next available time

                % Process packet from the queue if it's not empty
                if queue_count > 0
                    queue_packet_time = queue(1, 1);
                    queue_packet_source = queue(1, 2);
                    % Shift queue elements
                    queue(1:queue_count-1, :) = queue(2:queue_count, :);
                    queue_count = queue_count - 1;
                    % Add the queued packet as a new event
                    event_list = [event_list; queue_packet_time, queue_packet_source];
                    event_list = sortrows(event_list, 1);
                    num_events = num_events + 1;
                end

            else
                % If the router is busy, add the packet to the queue if there is space
                if queue_count < queue_size
                    queue_count = queue_count + 1;
                    queue(queue_count, :) = [event_time, source];  % Queue the packet
                else
                    dropped = dropped + 1;  % Increment dropped packets if queue is full
                end
            end
        end
    end

    % Trim unused space in departures array
    departures = departures(1:departure_count, :);

    % Calculate metrics
    total_departures = size(departures, 1);
    total_arrivals = length(arrivals_H1) + length(arrivals_H2);

    if total_departures > 0
        throughput = (total_departures * packet_size * 8) / sim_time / 1e6; % Mbps
        avg_delay = mean(departures(:, 2) - departures(:, 1)); % Average delay in seconds
    else
        throughput = 0;
        avg_delay = NaN; % Or some other indicator of no departures
    end

    if total_arrivals > 0
        packet_loss_rate = (dropped / total_arrivals) * 100; % Packet loss rate
    else
        packet_loss_rate = 0; % No arrivals, no loss
    end
end

% Poisson process to generate packet arrival times
function arrivals = poisson_process(lambda, sim_time)
    inter_arrivals = -log(rand(ceil(lambda * sim_time * 1.5), 1)) / lambda; % Add a buffer
    arrivals = cumsum(inter_arrivals);
    arrivals = arrivals(arrivals <= sim_time);
end
